from aiogram import Router, F
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from Keyboards import main_inlines_kb, tags, recommend, ai_button_kb, first_button_kb, lol_button_kb
from ai_generators import generate
from aiogram.fsm.state import State, StatesGroup
from context import ContexManager

from weather import get_weather


context = ContexManager()
user_router = Router()

class Work(StatesGroup):
    process = State()
    eda = State()
    dasdasd = State()

#–•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
async def set_processing(state: FSMContext, is_processing: bool):
    await state.update_data(is_processing=is_processing)

async def is_processing(state: FSMContext):
    data = await state.get_data()
    return data.get("is_processing", False)


#–ë–∞–∑–∞
@user_router.message(F.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def clear1(message: types.Message):
    context.contex = {}
    await message.answer(text="–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")





# –°—Ç–∞—Ä—Ç
@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–¢—ã –ø–æ–ø–∞–ª –Ω–∞ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <b>BackSpace</b> üåå, —è —É–≤–µ—Ä–µ–Ω, –≤–∞–º –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è)",
        reply_markup=first_button_kb, parse_mode='HTML')





@user_router.message(F.text=="–ú–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é ",
                         reply_markup=main_inlines_kb)

@user_router.message(F.text=="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è –∑–Ω–∞—é –æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ ",
                         reply_markup=main_inlines_kb)

@user_router.callback_query(F.data == "weather")
async def cmd_weather(callback: types.CallbackQuery):
    weather = await get_weather()
    await callback.answer("weather")
    await callback.message.answer(weather)





@user_router.callback_query(F.data == "tag")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=tags)


@user_router.callback_query(F.data == "recommend")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=recommend)


@user_router.callback_query(F.data == "movie")
async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? ", reply_markup=ai_button_kb)
    await state.set_state(Work.process)
    await set_processing(state, False)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å






@user_router.callback_query(F.data == "rest")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")
    await state.set_state(Work.eda)
    user_id = callback.from_user.id
    user_text = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.add_message(user_id, {"role": "user", "content": user_text})
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = context.get_context(user_id)
    await callback.bot.send_chat_action(chat_id=callback.from_user.id, action=ChatAction.TYPING)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—å
    res = await generate(history)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    model_response = res.choices[0].message.content
    context.add_message(user_id, {"role": "assistant", "content": model_response})

    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
    await callback.message.answer(model_response)
    await state.clear()
    await callback.message.answer("<i>–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π"
                                  " <b>–í–æ–ø—Ä–æ—Å –æ–Ω–ª–∞–π–Ω-–≥–∏–¥—É üë®‚Äçüíª</b></i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')




@user_router.callback_query(F.data == "fast_fud")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Ñ–∞—Å—Ç-—Ñ—É–¥", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")
    await state.set_state(Work.eda)
    user_id = callback.from_user.id
    user_text = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ñ–∞—Å—Ç-—Ñ—É–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å, –ø–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞ 25 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞, –Ω–µ –ø–∏—à–∏ –ø—Ä–æ KFC –∏ McDonalds"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.add_message(user_id, {"role": "user", "content": user_text})
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = context.get_context(user_id)
    await callback.bot.send_chat_action(chat_id=callback.from_user.id, action=ChatAction.TYPING)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—å
    res = await generate(history)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    model_response = res.choices[0].message.content
    context.add_message(user_id, {"role": "assistant", "content": model_response})

    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
    await callback.message.answer(model_response)
    await state.clear()
    await callback.message.answer("<i>–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π"
                                  " <b>–í–æ–ø—Ä–æ—Å –æ–Ω–ª–∞–π–Ω-–≥–∏–¥—É üë®‚Äçüíª</b></i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')



@user_router.callback_query(F.data == "razvet")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–∑–≤–ª–µ—á—å—Å—è", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")
    await state.set_state(Work.eda)
    user_id = callback.from_user.id
    user_text = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å: –ø–∞—Ä–∫–∏ –∞—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π, –∫–∏–Ω–æ, –≤—ã—Å—Ç–∞–≤–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è, –ù–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç, —Ç–æ –µ—Å—Ç—å —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –∏–¥—É—Ç —Å–µ–π—á–∞—Å –ª–∏–±–æ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è, –ø–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞ 25 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.add_message(user_id, {"role": "user", "content": user_text})
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = context.get_context(user_id)
    await callback.bot.send_chat_action(chat_id=callback.from_user.id, action=ChatAction.TYPING)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—å
    res = await generate(history)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    model_response = res.choices[0].message.content
    context.add_message(user_id, {"role": "assistant", "content": model_response})
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
    await callback.message.answer(model_response)
    await state.clear()
    await callback.message.answer("<i>–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π"
                                  " <b>–í–æ–ø—Ä–æ—Å –æ–Ω–ª–∞–π–Ω-–≥–∏–¥—É üë®‚Äçüíª</b></i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')

















@user_router.message(Work.process)
async def cmd_ai_process(message: types.Message, state: FSMContext):
    if await is_processing(state):
        await message.answer("–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    await set_processing(state, True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å

    user_id = message.from_user.id
    user_text = message.text

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.add_message(user_id, {"role": "user", "content": user_text})

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = context.get_context(user_id)
    print(context.context)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—å
    res = await generate(history)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    model_response = res.choices[0].message.content
    context.add_message(user_id, {"role": "assistant", "content": model_response})

    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await message.answer(model_response)

    await set_processing(state, False)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞



@user_router.message()
async def echo_messages(message: types.Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    if message.text:
        await message.answer(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ...\n–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í–æ—Ç –º–æ–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"                                  "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n")
    else:
        try:
            await message.copy_to(chat_id=message.chat.id)
        except TypeError:
            await message.reply(text="üí•ü´£ –ù–∏—á–µ–≥–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ...")


